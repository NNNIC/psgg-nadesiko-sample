＃
＿次ステートは「S_START」
＿今ステートは空
＿ループ状態はオン

＃＿コールスタック定義
＿コールスタック最大値は５

＿コールスタックは空配列
＿コールスタック＠０は空
＿コールスタック＠１は空
＿コールスタック＠２は空
＿コールスタック＠３は空
＿コールスタック＠４は空

＿コールスタックレベルは０

＃
＃ 【StateGoの自動挿入開始】 indent(0) $/./$
＃             psggConverterLib.dll converted from psgg-file:TestControl.psgg

＃【組込】
＃E_0000
＃
N=4           #分割数
R=150         #半径
＃【組込】
＃E_0001
＃
I=0
＃【組込】
＃E_0002
＃宣言
AO=0      #分割三角形の中心角
AR=0      #分割三角形の円接点角
KAME_SA=0 #出発点角度
KAME_MA=0 #移動角度
KAME_ML=0 #移動距離
＃
●S_0000とは
    ＃
    KAME_MAだけカメ右回転
    もし、＿次ステートが空ならば
        ＿次ステートに「S_RET000」を代入
    ここまで
    戻る
ここまで
＃
●S_0002とは
    ＃
    150だけカメ進む。
    90だけカメ右回転。
    50だけカメ進む。
    90だけカメ右回転。
    150だけカメ進む。
    もし、＿次ステートが空ならば
        ＿次ステートに「S_END」を代入
    ここまで
    戻る
ここまで
＃
●S_0003とは
    ＃
    カメ作成。
    もし、＿次ステートが空ならば
        ＿次ステートに「S_0004」を代入
    ここまで
    戻る
ここまで
＃
●S_0004とは
    ＃
    [250,20]にカメ起点移動。
    もし、＿次ステートが空ならば
        ＿次ステートに「S_0005」を代入
    ここまで
    戻る
ここまで
＃
●S_0005とは
    ＃
    KAME_SAにカメ角度設定。
    もし、＿次ステートが空ならば
        ＿次ステートに「S_LOP000」を代入
    ここまで
    戻る
ここまで
＃
●S_CALCとは
    ＃
    AO=360/N      #分割三角形の中心角
    AR=(180-AO)/2 #分割三角形の円接点角
    KAME_SA=180-AR   #出発点角度
    KAME_MA=180-AR*2 #移動角度
    KAME_ML=SIN((90-AR)*(PI/180)) * R * 2
    もし、＿次ステートが空ならば
        ＿次ステートに「S_SETSPEED」を代入
    ここまで
    戻る
ここまで
＃
●S_ENDとは
    ＃
    戻る
ここまで
＃
●S_LOP000とは
    ＃
    I=0
    ＿次ステートに「S_LOP000_cond____」を代入
    戻る
ここまで
●S_LOP000_cond____とは
    もし、（I<N）ならば
        もし、（＿コールスタックレベル＞＝(＿コールスタック最大値＋１)）ならば
        	「＿コールスタックがオーバーフローしました」と言う
        	＿ループ状態はオフ
        	戻る
        ここまで
        ＿コールスタック＠＿コールスタックレベルに「S_LOP000_next____」を代入
        ＿コールスタックレベルに１を足して、＿コールスタックレベルに代入
        ＿次ステートに「S_SBS000」を代入
    違えば
        ＿次ステートに「S_END」を代入
    ここまで
    戻る
ここまで
●S_LOP000_next____とは
    I=I+1
    ＿次ステートに「S_LOP000_cond____」を代入
    戻る
ここまで
＃
●S_RET000とは
    ＃
    もし、（＿コールスタックレベル＜＝０）ならば
    	「＿コールスタックがアンダーフローしました」と言う
    	終
    ここまで
    ＿コールスタックレベルから１を引いて、＿コールスタックレベルに代入
    ＿コールスタック＠＿コールスタックレベルを＿次ステートに代入
    戻る
ここまで
＃
●S_SBS000とは
    ＃
    もし、＿次ステートが空ならば
        ＿次ステートに「S_SBS001」を代入
    ここまで
    戻る
ここまで
＃
●S_SBS001とは
    ＃
    KAME_MLだけカメ進む
    もし、＿次ステートが空ならば
        ＿次ステートに「S_0000」を代入
    ここまで
    戻る
ここまで
＃
●S_SETSPEEDとは
    ＃
    (KAME_ML*100/R)にカメ速度設定。
    もし、＿次ステートが空ならば
        ＿次ステートに「S_0003」を代入
    ここまで
    戻る
ここまで
＃
●S_STARTとは
    ＃
    もし、＿次ステートが空ならば
        ＿次ステートに「S_CALC」を代入
    ここまで
    戻る
ここまで


＃ 【StateGoの自動挿入終了】

ループカウンタは０
ループカウンタ最大値は１００００

＿ループ状態はオン

（＿ループ状態＝オン）の間
	ループカウンタに１を足して、ループカウンタに代入する
	もし、ループカウンタ＝ループカウンタ最大値ならば
		「エラー：ループカウンタが最大値{ループカウンタ}に達しました」と言う
　　　　＃終了
　　　　＿今ステートは空
        ＿次ステートは空
		＿ループ状態はオフ
	ここまで
	＃
	もし、＿次ステートが空でなければ
		＿今ステートに＿次ステートを代入
		＿次ステートに空を代入
	ここまで
	＃
	もし、＿今ステートが空でなければ
	    ／／「実行ステートは{＿今ステート}です」と言う
        ＃【StateGoの自動挿入開始】 indent(8) $/^S_/->#switch$
        ＃             psggConverterLib.dll converted from psgg-file:TestControl.psgg

        もし、（＿今ステート＝「S_0000」）ならば、S_0000する
        もし、（＿今ステート＝「S_0002」）ならば、S_0002する
        もし、（＿今ステート＝「S_0003」）ならば、S_0003する
        もし、（＿今ステート＝「S_0004」）ならば、S_0004する
        もし、（＿今ステート＝「S_0005」）ならば、S_0005する
        もし、（＿今ステート＝「S_CALC」）ならば、S_CALCする
        もし、（＿今ステート＝「S_END」）ならば、S_ENDする
        もし、（＿今ステート＝「S_LOP000」）ならば、S_LOP000する
        もし、（＿今ステート＝「S_LOP000_cond____」）ならば、S_LOP000_cond____する
        もし、（＿今ステート＝「S_LOP000_next____」）ならば、S_LOP000_next____する
        もし、（＿今ステート＝「S_RET000」）ならば、S_RET000する
        もし、（＿今ステート＝「S_SBS000」）ならば、S_SBS000する
        もし、（＿今ステート＝「S_SBS001」）ならば、S_SBS001する
        もし、（＿今ステート＝「S_SETSPEED」）ならば、S_SETSPEEDする
        もし、（＿今ステート＝「S_START」）ならば、S_STARTする


		＃【StateGoの自動挿入終了】
		もし、（＿今ステート＝「S_END」）ならば
			#「終了」と言う
			＿ループ状態はオフ
		ここまで
	ここまで


　
/*
以下は、StateGoのマクロです。

:psgg-macro-start

; コメント行  {%0}はコメントに変換
commentline=＃ {%0}

#switch=@@@
もし、（＿今ステート＝「[[state]]」）ならば、[[state]]する
<<<?state-typ/^loop$/
もし、（＿今ステート＝「[[state]]_cond____」）ならば、[[state]]_cond____する
もし、（＿今ステート＝「[[state]]_next____」）ならば、[[state]]_next____する
>>>
@@@

@branch=@@@
<<<?"{%0}"/^brif$/
もし、（[[brcond:{%N}]]）ならば
    ＿次ステートに「{%1}」を代入
ここまで
>>>
<<<?"{%0}"/^brifc$/
もし、（[[brcond:{%N}]]）ならば
    ＿次ステートに「{%1}」を代入
>>>
<<<?"{%0}"/^brelseif$/
違えば、もし、（[[brcond:{%N}]]）ならば
    ＿次ステートに「{%1}」を代入
ここまで    
>>>
<<<?"{%0}"/^brelseifc$/
違えば、もし、（[[brcond:{%N}]]）ならば
    ＿次ステートに「{%1}」を代入
>>>
<<<?"{%0}"/^brelse$/
違えば
    ＿次ステートに「{%1}」を代入
ここまで
>>>
@@@

gosub=@@@
もし、（＿コールスタックレベル＞＝(＿コールスタック最大値＋１)）ならば
	「＿コールスタックがオーバーフローしました」と言う
	＿ループ状態はオフ
	戻る
ここまで
＿コールスタック＠＿コールスタックレベルに「{%2}」を代入
＿コールスタックレベルに１を足して、＿コールスタックレベルに代入
＿次ステートに「{%1}」を代入
@@@

return=@@@
もし、（＿コールスタックレベル＜＝０）ならば
	「＿コールスタックがアンダーフローしました」と言う
	終
ここまで
＿コールスタックレベルから１を引いて、＿コールスタックレベルに代入
＿コールスタック＠＿コールスタックレベルを＿次ステートに代入
@@@

:psgg-macro-end
*/