＃
次ステートは「S_START」
現在ステートは空

＃コールスタック定義
コールスタック最大値は５

コールスタック￥０は空
コールスタック￥１は空
コールスタック￥２は空
コールスタック￥３は空
コールスタック￥４は空

コールスタックレベルは０

#

ループカウンタは０
ループカウンタ最大値は１００００

オンの間
	ループカウンタに１を足して、ループカウンタに代入する
	もし、ループカウンタ＝ループカウンタ最大値ならば
		「エラー：ループカウンタが最大値{ループカウンタ}に達しました」と言う
		終了
	ここまで
	＃
	もし、次ステートが空でなければ
		現在ステートに次ステートを代入
		次ステートに空を代入
	ここまで
	＃
	もし、現在ステートが空でなければ
        ＃【StateGoの自動挿入開始】 indent(8) $/./->#switch$
        ＃             psggConverterLib.dll converted from psgg-file:TestControl.psgg

        もし、（現在ステート＝「S_0000」）ならば、S_0000する
        もし、（現在ステート＝「S_0001」）ならば、S_0001する
        もし、（現在ステート＝「S_0002」）ならば、S_0002する
        もし、（現在ステート＝「S_0003」）ならば、S_0003する
        もし、（現在ステート＝「S_0004」）ならば、S_0004する
        もし、（現在ステート＝「S_0005」）ならば、S_0005する
        もし、（現在ステート＝「S_0006」）ならば、S_0006する
        もし、（現在ステート＝「S_END」）ならば、S_ENDする
        もし、（現在ステート＝「S_GSB000」）ならば、S_GSB000する
        もし、（現在ステート＝「S_GSB001」）ならば、S_GSB001する
        もし、（現在ステート＝「S_LOP000」）ならば、S_LOP000する
        もし、（現在ステート＝「S_LOP000_cond____」）ならば、S_LOP000_cond____する
        もし、（現在ステート＝「S_LOP000_next____」）ならば、S_LOP000_next____する
        もし、（現在ステート＝「S_PASS」）ならば、S_PASSする
        もし、（現在ステート＝「S_RET000」）ならば、S_RET000する
        もし、（現在ステート＝「S_RET001」）ならば、S_RET001する
        もし、（現在ステート＝「S_SBS000」）ならば、S_SBS000する
        もし、（現在ステート＝「S_SBS001」）ならば、S_SBS001する
        もし、（現在ステート＝「S_START」）ならば、S_STARTする


		＃【StateGoの自動挿入終了】
		もし、（現在ステート＝「S_END」）ならば
			「終了」と言う
			終了
		ここまで	

＃ 【StateGoの自動挿入開始】 indent(0) $/./$
＃             psggConverterLib.dll converted from psgg-file:TestControl.psgg

＃
●S_0000
    ＃
    「こんにちは、なでしこさん！」と言う
    もし、次ステートが空ならば
        次ステートに「S_0001」を代入
    ここまで
    戻る
＃
●S_0001
    ＃
    乱数の種にシステム時間を代入
    Ａに３の乱数＋１を代入
    もし、（Ａ＝１）ならば
        次ステートに「S_0002」を代入
    違えば、もし、（Ａ＝２）ならば
        次ステートに「S_0004」を代入
    違えば
        次ステートに「S_0003」を代入
    ここまで
    戻る
＃
●S_0002
    ＃
    「ファースト」と言う
    もし、次ステートが空ならば
        次ステートに「S_PASS」を代入
    ここまで
    戻る
＃
●S_0003
    ＃
    「サード」と言う
    もし、次ステートが空ならば
        次ステートに「S_PASS」を代入
    ここまで
    戻る
＃
●S_0004
    ＃
    「セカンド」と言う
    もし、次ステートが空ならば
        次ステートに「S_PASS」を代入
    ここまで
    戻る
＃
●S_0005
    ＃
    「サブルーチンを実行中です」と言う
    もし、次ステートが空ならば
        次ステートに「S_RET000」を代入
    ここまで
    戻る
＃
●S_0006
    ＃
    「インデックスは{インデックス}です」と言う
    もし、次ステートが空ならば
        次ステートに「S_RET001」を代入
    ここまで
    戻る
＃
●S_END
    ＃
    戻る
＃
●S_GSB000
    ＃
    もし、（コールスタックレベル＞＝(コールスタック最大値＋１)）ならば
    	「コールスタックがオーバーフローしました」と言う
    	終了
    ここまで
    コールスタック￥コールスタックレベルに「S_GSB001」を代入
    コールスタックレベルに１を足して、コールスタックレベルに代入
    次ステートに「S_SBS000」を代入
    戻る
＃
●S_GSB001
    ＃
    もし、次ステートが空ならば
        次ステートに「S_LOP000」を代入
    ここまで
    戻る
＃
●S_LOP000
    ＃
    インデックスに０を代入
    次ステートに「S_LOP000_cond____」を代入
    戻る
●S_LOP000_cond____
    もし、（インデックス＜１０）ならば
        もし、（コールスタックレベル＞＝(コールスタック最大値＋１)）ならば
        	「コールスタックがオーバーフローしました」と言う
        	終了
        ここまで
        コールスタック￥コールスタックレベルに「S_LOP000_next____」を代入
        コールスタックレベルに１を足して、コールスタックレベルに代入
        次ステートに「S_SBS001」を代入
    違えば
        次ステートに「S_END」を代入
    ここまで
    戻る
●S_LOP000_next____
    インデックスに１を足して、インデックスに代入
    次ステートに「S_LOP000_cond____」を代入
    戻る
＃
●S_PASS
    ＃
    もし、次ステートが空ならば
        次ステートに「S_GSB000」を代入
    ここまで
    戻る
＃
●S_RET000
    ＃
    もし、（コールスタックレベル＜＝０）ならば
    	「コールスタックがアンダーフローしました」と言う
    	終了
    ここまで
    コールスタックレベルから１を引いて、コールスタックレベルに代入
    コールスタック￥コールスタックレベルを次ステートに代入
    戻る
＃
●S_RET001
    ＃
    もし、（コールスタックレベル＜＝０）ならば
    	「コールスタックがアンダーフローしました」と言う
    	終了
    ここまで
    コールスタックレベルから１を引いて、コールスタックレベルに代入
    コールスタック￥コールスタックレベルを次ステートに代入
    戻る
＃
●S_SBS000
    ＃
    もし、次ステートが空ならば
        次ステートに「S_0005」を代入
    ここまで
    戻る
＃
●S_SBS001
    ＃
    もし、次ステートが空ならば
        次ステートに「S_0006」を代入
    ここまで
    戻る
＃
●S_START
    ＃
    もし、次ステートが空ならば
        次ステートに「S_0000」を代入
    ここまで
    戻る


＃ 【StateGoの自動挿入終了】

　
/*
以下は、StateGoのマクロです。

:psgg-macro-start

; コメント行  {%0}はコメントに変換
commentline=＃ {%0}

#switch=@@@
もし、（現在ステート＝「[[state]]」）ならば、[[state]]する
<<<?state-typ/^loop$/
もし、（現在ステート＝「[[state]]_cond____」）ならば、[[state]]_cond____する
もし、（現在ステート＝「[[state]]_next____」）ならば、[[state]]_next____する
>>>
@@@

@branch=@@@
<<<?"{%0}"/^brif$/
もし、（[[brcond:{%N}]]）ならば
    次ステートに「{%1}」を代入
ここまで
>>>
<<<?"{%0}"/^brifc$/
もし、（[[brcond:{%N}]]）ならば
    次ステートに「{%1}」を代入
>>>
<<<?"{%0}"/^brelseif$/
違えば、もし、（[[brcond:{%N}]]）ならば
    次ステートに「{%1}」を代入
ここまで    
>>>
<<<?"{%0}"/^brelseifc$/
違えば、もし、（[[brcond:{%N}]]）ならば
    次ステートに「{%1}」を代入
>>>
<<<?"{%0}"/^brelse$/
違えば
    次ステートに「{%1}」を代入
ここまで
>>>
@@@

gosub=@@@
もし、（コールスタックレベル＞＝(コールスタック最大値＋１)）ならば
	「コールスタックがオーバーフローしました」と言う
	終了	  
ここまで
コールスタック￥コールスタックレベルに「{%2}」を代入
コールスタックレベルに１を足して、コールスタックレベルに代入
次ステートに「{%1}」を代入
@@@

return=@@@
もし、（コールスタックレベル＜＝０）ならば
	「コールスタックがアンダーフローしました」と言う
	終了
ここまで
コールスタックレベルから１を引いて、コールスタックレベルに代入
コールスタック￥コールスタックレベルを次ステートに代入
@@@

:psgg-macro-end
*/





